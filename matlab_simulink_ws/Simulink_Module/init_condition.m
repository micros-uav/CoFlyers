%% using parameters.xml to config. 
close all;

[map3d_faces, map3d_struct, model_stls, params, position0, param_simulink] = read_parameter_xml("../Prototype_Simulator/parameters.xml");

local_ip = param_simulink.local_ip;
target_ip_array = param_simulink.target_ip;
sim_quad = param_simulink.sim_quad;
number = size(position0,2);

sample_time_control = params.sample_time_control_upper;
flag_alg = params.swarm_algorithm_type;
%%
if ~sim_quad
    sample_time_base = sample_time_control;
else
    sample_time_base = 0.0025;
    local_ip = '127.0.0.1';
    target_ip_array = ones(1,number)*1;
end
%% The following code generally does not need to be modified
% sample_time_control = sample_time_control_upper;
% flag_alg = swarm_algorithm_type;

path_here = mfilename('fullpath');
ind = strfind(path_here,"init_condition");
save(strcat(path_here(1:(ind-1)),"model_stls.mat"),"model_stls");

%%%% simulator params %%%%
[gravity,...
    inertia,...
    mass,...
    len_arm,...
    v_max_h,...
    v_max_v,...
    yaw_rate_max,...
    a_max_h,...
    a_max_v,...
    euler_max,...
    thrust_max,...
    ct,...
    cm,...
    T_rotor_inverse,...
    kp_att,...
    kd_att,...
    kp_pos,...
    ki_pos,...
    kd_pos,...
    cd_filter_pos,...
    lb_pos_pid,...
    ub_pos_pid,...
    kp_vel,...
    ki_vel,...
    kd_vel,...
    cd_filter_vel,...
    lb_vel_pid,...
    ub_vel_pid] = quadcopter_module_parameters();

inertia = inertia';
kp_att = kp_att';
kd_att = kd_att';

kp_pos = kp_pos';
ki_pos = ki_pos';
kd_pos = kd_pos';
lb_pos_pid = lb_pos_pid';
ub_pos_pid = ub_pos_pid';

kp_vel = kp_vel';
ki_vel = ki_vel';
kd_vel = kd_vel';
lb_vel_pid = lb_vel_pid';
ub_vel_pid = ub_vel_pid';

position = position0;
velocity = [rand(2,number)*0.001;zeros(1,number)];
qwxyz = zeros(4,number); qwxyz(1,:) = 1;
pqr = zeros(3,number);
motor_speed = zeros(4,number);
states_omeges = [position;velocity;qwxyz;pqr;motor_speed];

% states_omeges = initialize_states(number,parameters_flocking,parameters_motion,...
%     parameters_map,1);
vehicle_int_con = states_omeges(1:13,:);
motor_init_con = states_omeges(14:17,:);
